// <auto-generated />
using System;
using DeliverNET.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DeliverNET.Migrations
{
    [DbContext(typeof(DeliverNETContext))]
    [Migration("20181211185824_InitCreate")]
    partial class InitCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DeliverNET.Data.Business", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Address");

                    b.Property<string>("Credentials");

                    b.Property<string>("Email");

                    b.Property<string>("Geolocation");

                    b.Property<bool>("IsVerified");

                    b.Property<string>("PhoneNumber");

                    b.Property<DateTime>("SignupDate");

                    b.Property<string>("Title");

                    b.Property<DateTime?>("VerificationDate");

                    b.HasKey("Id");

                    b.ToTable("Businesses");
                });

            modelBuilder.Entity("DeliverNET.Data.BusinessCashier", b =>
                {
                    b.Property<string>("DeliverNetUserId");

                    b.Property<int>("BusinessId");

                    b.HasKey("DeliverNetUserId");

                    b.HasIndex("BusinessId")
                        .IsUnique();

                    b.ToTable("BusinessCashiers");
                });

            modelBuilder.Entity("DeliverNET.Data.BusinessOwner", b =>
                {
                    b.Property<string>("DeliverNetUserId");

                    b.Property<int>("BusinessId");

                    b.HasKey("DeliverNetUserId");

                    b.HasIndex("BusinessId")
                        .IsUnique();

                    b.ToTable("BusinessOwners");
                });

            modelBuilder.Entity("DeliverNET.Data.Deliverer", b =>
                {
                    b.Property<string>("DeliverNetUserId");

                    b.Property<string>("Credentials");

                    b.Property<string>("Geolocation");

                    b.Property<bool>("IsDelivering");

                    b.Property<bool>("IsWorking");

                    b.Property<string>("OperationalRegion");

                    b.HasKey("DeliverNetUserId");

                    b.ToTable("Deliverers");
                });

            modelBuilder.Entity("DeliverNET.Data.DeliverNETUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("DOB");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("DeliverNET.Data.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AcceptedTime");

                    b.Property<string>("Address");

                    b.Property<int?>("BusinessId");

                    b.Property<string>("CashierDeliverNetUserId");

                    b.Property<string>("Comments");

                    b.Property<DateTime?>("DeliveredTime");

                    b.Property<string>("DelivererDeliverNetUserId");

                    b.Property<string>("DoorName");

                    b.Property<string>("FirstName");

                    b.Property<int?>("FloorNo");

                    b.Property<string>("Geolocation");

                    b.Property<bool>("IsAccepted");

                    b.Property<bool>("IsDelivered");

                    b.Property<bool>("IsPickedup");

                    b.Property<string>("LastName");

                    b.Property<int>("PaymentTypeId");

                    b.Property<string>("PhoneNumber");

                    b.Property<DateTime?>("PickupTime");

                    b.Property<float?>("Price");

                    b.Property<float?>("Tariff");

                    b.Property<DateTime>("Tstamp");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("CashierDeliverNetUserId");

                    b.HasIndex("DelivererDeliverNetUserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("DeliverNET.Data.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .IsRequired();

                    b.Property<string>("RateeId");

                    b.Property<string>("Rater");

                    b.Property<DateTime>("Tstamp");

                    b.HasKey("Id");

                    b.HasIndex("RateeId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DeliverNET.Data.BusinessCashier", b =>
                {
                    b.HasOne("DeliverNET.Data.Business", "Business")
                        .WithOne("BusinessCashier")
                        .HasForeignKey("DeliverNET.Data.BusinessCashier", "BusinessId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DeliverNET.Data.DeliverNETUser", "DeliverNETUser")
                        .WithOne("BusinessCashier")
                        .HasForeignKey("DeliverNET.Data.BusinessCashier", "DeliverNetUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DeliverNET.Data.BusinessOwner", b =>
                {
                    b.HasOne("DeliverNET.Data.Business", "Business")
                        .WithOne("BusinessOwner")
                        .HasForeignKey("DeliverNET.Data.BusinessOwner", "BusinessId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DeliverNET.Data.DeliverNETUser", "DeliverNETUser")
                        .WithOne("BusinessOwner")
                        .HasForeignKey("DeliverNET.Data.BusinessOwner", "DeliverNetUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DeliverNET.Data.Deliverer", b =>
                {
                    b.HasOne("DeliverNET.Data.DeliverNETUser", "DeliverNETUser")
                        .WithOne("Deliverer")
                        .HasForeignKey("DeliverNET.Data.Deliverer", "DeliverNetUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DeliverNET.Data.Order", b =>
                {
                    b.HasOne("DeliverNET.Data.Business", "Business")
                        .WithMany()
                        .HasForeignKey("BusinessId");

                    b.HasOne("DeliverNET.Data.BusinessCashier", "Cashier")
                        .WithMany()
                        .HasForeignKey("CashierDeliverNetUserId");

                    b.HasOne("DeliverNET.Data.Deliverer", "Deliverer")
                        .WithMany()
                        .HasForeignKey("DelivererDeliverNetUserId");
                });

            modelBuilder.Entity("DeliverNET.Data.Rating", b =>
                {
                    b.HasOne("DeliverNET.Data.DeliverNETUser", "Ratee")
                        .WithMany("Ratings")
                        .HasForeignKey("RateeId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DeliverNET.Data.DeliverNETUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DeliverNET.Data.DeliverNETUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DeliverNET.Data.DeliverNETUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DeliverNET.Data.DeliverNETUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
